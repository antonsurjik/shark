dotnet new mvc

"ConnectionStrings"

dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL

// Models/Category.cs
namespace EfRelationsDemo.Models
{
    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; }

        // Навигационное свойство
        public ICollection<Product> Products { get; set; }
    }
}

// Models/Product.cs
namespace EfRelationsDemo.Models
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }

        // Внешний ключ
        public int CategoryId { get; set; }

        // Навигационное свойство
        public Category Category { get; set; }
    }
}

// Data/ApplicationDbContext.cs
using Microsoft.EntityFrameworkCore;
using EfRelationsDemo.Models;

namespace EfRelationsDemo.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public DbSet<Category> Categories { get; set; }
        public DbSet<Product> Products { get; set; }
    }
}

Pr.cs:
using EfRelationsDemo.Data;
using Microsoft.EntityFrameworkCore;

builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

> dotnet ef migrations add InitWithRelations
> dotnet ef database update

// Controllers/CategoriesController.cs
using Microsoft.AspNetCore.Mvc;
using EfRelationsDemo.Data;
using EfRelationsDemo.Models;
using Microsoft.EntityFrameworkCore;

namespace EfRelationsDemo.Controllers
{
    public class CategoriesController : Controller
    {
        private readonly ApplicationDbContext _context;

        public CategoriesController(ApplicationDbContext context)
        {
            _context = context;
        }

        public IActionResult Index()
        {
            var categories = _context.Categories.Include(c => c.Products).ToList();
            return View(categories);
        }

        public IActionResult Create() => View();

        [HttpPost]
        public IActionResult Create(Category category)
        {
            _context.Categories.Add(category);
            _context.SaveChanges();
            return RedirectToAction("Index");
        }
    }
}

// Controllers/ProductsController.cs
using Microsoft.AspNetCore.Mvc;
using EfRelationsDemo.Data;
using EfRelationsDemo.Models;
using Microsoft.EntityFrameworkCore;

namespace EfRelationsDemo.Controllers
{
    public class ProductsController : Controller
    {
        private readonly ApplicationDbContext _context;

        public ProductsController(ApplicationDbContext context)
        {
            _context = context;
        }

        public IActionResult Index()
        {
            var products = _context.Products.Include(p => p.Category).ToList();
            return View(products);
        }

        public IActionResult Create()
        {
            ViewBag.Categories = _context.Categories.ToList();
            return View();
        }

        [HttpPost]
        public IActionResult Create(Product product)
        {
            _context.Products.Add(product);
            _context.SaveChanges();
            return RedirectToAction("Index");
        }
    }
}

Views/Categories/Index.cshtml:
@model IEnumerable<EfRelationsDemo.Models.Category>

<h2>Categories</h2>

<a href="/Categories/Create">Add New</a>

<ul>
@foreach (var category in Model)
{
    <li>
        @category.Name
        <ul>
        @foreach (var p in category.Products)
        {
            <li>@p.Name</li>
        }
        </ul>
    </li>
}
</ul>

Create.cshtml:
@model EfRelationsDemo.Models.Category

<h2>Create Category</h2>

<form method="post">
    <label>Name:</label>
    <input asp-for="Name" />
    <button type="submit">Save</button>
</form>

Views/Products/Index.cshtml:
@model IEnumerable<EfRelationsDemo.Models.Product>

<h2>Products</h2>

<a href="/Products/Create">Add New</a>

<ul>
@foreach (var product in Model)
{
    <li>@product.Name (@product.Category.Name)</li>
}
</ul>

Create.cshtml:
@model EfRelationsDemo.Models.Product
@{
    var categories = ViewBag.Categories as List<EfRelationsDemo.Models.Category>;
}

<h2>Create Product</h2>

<form method="post">
    <label>Name:</label>
    <input asp-for="Name" />
    <br />
    <label>Category:</label>
    <select asp-for="CategoryId">
        @foreach (var category in categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </select>
    <br />
    <button type="submit">Save</button>
</form>

> dotnet run,
/Categories
/Products